1- Crear proyecto
$ django-admin startproject mysite
El proyecto se crea en un directorio /proyecto, que dentro tiene manage.py y otro subdirectorio /proyecto, que es en sí el proyecto.
Este subdirectorio tiene __init__.py, settings.py, urls.py (es como una tabla de contenidos), asgi.py y wsgi.py que son el punto de entrada para servidores ASGI y WSGI.


2- Crear la aplicación de Polls.
$ python manage.py startapp polls
Se crea un directorio polls.



3- Crear vistas.
Se crean en polls/views.py. Hay que importar HttpResponse.



4- Configuración de las distintas aplicaciones.
Para ello crear en polls, el fichero urls.py y en proyecto/urls.py incluir polls.url


5- Configurar DB
Por defecto, Django usa SQLite, pero se puede cambiar cambiando la directiva DABASES 'default' y más configuraciones (https://docs.djangoproject.com/en/3.2/intro/tutorial02/) de settings.py


6- Crear modelos
Crear las clases
Para activarlas, hay que ir a la directiva INSTALLED_APPS de settings.py. Aquí hay que incluir las clases que se hayan definido en los polls. Por lo que hay que incluir 'polls.apps.PollsConfig'
Después ejecutar python manage.py makemigrations polls y se verá que se han creado los modelos de las clases que se hayan definido. Con este comando es como Django guarda los cambios que se hagan en los modelos. Para aplicarlos a la DB, hay que usar python manage.py migrate


7- Administrador de Django
He puesto: admin/admin
EN polls/admin se puede actualizar para que se creen los modelos: admin.site.register(Question), con esto cuando entramos en el navegador a /admin y ponemos la contraseña, se muestran las preguntas...


8- Otras vistas
En Django las vistas son funciones en Python. Django elige las vistas examinando la URL después del dominio

Podemos añadir más vistas. En este caso se han añadido detail, results y vote.

Después hemos cambiado el index para que haga algo de verdad, en este caso, devuelve las 5 Question más recientes.

Cuando queremos mostrar algo, se hace sobre una template. Para ello hay que crear el directorio templates, donde se alojarán. Dentro hay que crear otro directorio: polls en el que estarán los ficheros .html. Esto es así por la forma en la que Django carga las plantillas.

Ahora hemos cambiado también la vista detail para el caso en el que la Question no existiera, con la función get_object_or_404(). Ahora es también necesario completar la template detail.html


9- Quitar las referencias explícitas de archivos
Como en urls.py le hemos dado un nombre a las rutas, podemos cambiar la ruta absoluta a este nombre


10- Namespacing
La única aplicación del proyecto es polls, por lo que definimos app_name como polls


10- Vistas genéricas
Hemos cambiado en urls.py de question_id a pk y en vez de que el nombre de la vista sea views.vista va a ser views.funcion.as_view(). EStas funciones son las que se definen en views.

En este caso introducimos dos vistas genéricas: ListVIew (muestra una lista de objetos) y DetailView (muestra una página detallada para un objeto en particular).
Para cada vista, es necesario indicar el objeto que muestra, atributo model y el nombre de la template en template_name.
También hay que indicar el context_object_type, que en el caso de una clase si no se indica nada, Django le asigna el nombre de la clase al atributo. Por ejemplo, la clase Question de la DetailView


11- Testing automático (Automated testing)
Antes para testing hemos estado usando el shell.
Hay muchas estrategias -> Test-driven development : Crear los tests antes que el código.

Crear tests:
1) Identificar bug
2) Escribir test en tests.py
3) Probar el test: python manage.py test polls
4) Arreglar

12- Mejorar una vista
En este caso, antes se mostraban las polls aunque no hubieran sido publicadas (que tenían pub_date en el futuro). Para arreglar esto, arreglamos el return de la función get_queryset

En el tutorial se mejoran las vistas del índice y de los detalles, se dan ideas de cómo se podría mejorar la de resultados.
Al final lo probaremos, ya que más tests es mejor.
Se recomienda que haya:
	- Una clase test por cada vista
	- Un método para cada condición que se quiere probar
	- Que los nombres de los métodos sean descriptivos de la funcionalidad
	
	
13- Ahora añadiremos más cosas de cara al navegador: imágenes, stylesheets... En Django a esto se le llama "static files"
En proyectos pequeños, no es un problema almacenar estos ficheros en ubicaciones a las que se acceda, pero en proyectos grandes es más complicado y se emplea django.contrib.staticfiles 

Creamos un directorio static en polls. Si miramos el fichero de settings.py de project1, veremos que por defecto los ficheros estáticos se encuentran en /static/.

Como la hoja de estilos se buscará en polls/style.css, dentro de static creamos esto.
****PARECE QUE EN EL TUTORIAL NO MENCIONA ALGO, PORQUE NO ENCEUNTRA EL STYLE.CSS*****


14- Formulario de entrada del admin
Para cambiar el formulario de entrada, a admin.site.register hay que pasarle como segundo parámetro una clase administrador.

***cambios siguiendo el tutorial***

en el atributo inlines, si se especifica la clase, se hará que esa clase estará dentro de la otra. Por ejemplo, en este caso, el formulario de las preguntas

con list_diaplay se muestran en lista los atributos que queremos mostrar de la clase

con list_filter se muestra un filtro del atributo que se pase

con search_fields se añade un fitreo de bśuqueda del atributo que se pase


15- Customizar las templates
EN settings, en TEMPLATES, DIRS, añadir [BASE_DIR / 'templates']
crear en polls/templates el directorio admin y copiar ahí el fichero base_site.html que está en /home/imjaimeortiz/.local/lib/python3.9/site-packages/django/contrib/admin/templates/admin/base_site.html 


16- Reusabilidad
